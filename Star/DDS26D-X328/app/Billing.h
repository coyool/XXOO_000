#ifndef __BILLING_H
#define __BILLING_H

/*Export define---------------------------------------------------*/
#define MONTH_BILLING_MAX_NUM					12

/*Export typedef-------------------------------------------------*/
static const uint32 cMonthBillingObjects[] =
{
	0x08000002,
	0x03200002,	//L1相正向有功总电量
	0x03220002,	//L1相反向有功总电量
	0x03340002,	//L1相组合有功电量(正向反)
	
/*	0x03000002,0x03000102,0x03000202,0x03000302,0x03000402,	//正向有功
	0x03020002,0x03020102,0x03020202,0x03020302,0x03020402,	//反向有功
	0x03040002,0x03040102,0x03040202,0x03040302,0x03040402,	//组合无功1
	0x03060002,0x03060102,0x03060202,0x03060302,0x03060402,	//组合无功2
	0x03080002,0x03080102,0x03080202,0x03080302,0x03080402,	//一象限无功
	0x030A0002,0x030A0102,0x030A0202,0x030A0302,0x030A0402,	//二象限无功
	0x030C0002,0x030C0102,0x030C0202,0x030C0302,0x030C0402,	//三象限无功
	0x030E0002,0x030E0102,0x030E0202,0x030E0302,0x030E0402,	//四象限无功
	0x03140002,0x03140102,0x03140202,0x03140302,0x03140402,	//组合有功1
	0x03150002,0x03150102,0x03150202,0x03150302,0x03150402,	//组合有功2
	0x03160002,0x03160102,0x03160202,0x03160302,0x03160402,	//组合无功
*/	
/*	0x03200002,0x03200102,0x03200202,0x03200302,0x03200402,	//L1正向有功
	0x03220002,0x03220102,0x03220202,0x03220302,0x03220402,	//L1反向有功
	0x03240002,0x03240102,0x03240202,0x03240302,0x03240402,	//L1组合无功1
	0x03260002,0x03260102,0x03260202,0x03260302,0x03260402,	//L1组合无功2
	0x03280002,0x03280102,0x03280202,0x03280302,0x03280402,	//L1一象限无功
	0x032A0002,0x032A0102,0x032A0202,0x032A0302,0x032A0402,	//L1二象限无功
	0x032C0002,0x032C0102,0x032C0202,0x032C0302,0x032C0402,	//L1三象限无功
	0x032E0002,0x032E0102,0x032E0202,0x032E0302,0x032E0402,	//L1四象限无功
*/
/*	0x03340002,0x03340102,0x03340202,0x03340302,0x03340402, //L1相组合有功电量(abs(QI+QIV)+(abs(QII+QIII))
	0x03350002,0x03350102,0x03350202,0x03350302,0x03350402, //L1相组合有功电量(abs(QI+QIV)-(abs(QII+QIII))
	0x03400002,0x03400102,0x03400202,0x03400302,0x03400402,	//L2正向有功
	0x03420002,0x03420102,0x03420202,0x03420302,0x03420402,	//L2反向有功
	0x03440002,0x03440102,0x03440202,0x03440302,0x03440402,	//L2组合无功1
	0x03460002,0x03460102,0x03460202,0x03460302,0x03460402,	//L2组合无功2
	0x03480002,0x03480102,0x03480202,0x03480302,0x03480402,	//L2一象限无功
	0x034A0002,0x034A0102,0x034A0202,0x034A0302,0x034A0402,	//L2二象限无功
	0x034C0002,0x034C0102,0x034C0202,0x034C0302,0x034C0402,	//L2三象限无功
	0x034E0002,0x034E0102,0x034E0202,0x034E0302,0x034E0402,	//L2四象限无功
	0x03540002,0x03540102,0x03540202,0x03540302,0x03540402, //L2相组合有功电量(abs(QI+QIV)+(abs(QII+QIII))
	0x03550002,0x03550102,0x03550202,0x03550302,0x03550402, //L2相组合有功电量(abs(QI+QIV)-(abs(QII+QIII))
	0x03600002,0x03600102,0x03600202,0x03600302,0x03600402,	//L3正向有功
	0x03620002,0x03620102,0x03620202,0x03620302,0x03620402,	//L3反向有功
	0x03640002,0x03640102,0x03640202,0x03640302,0x03640402,	//L3组合无功1
	0x03660002,0x03660102,0x03660202,0x03660302,0x03660402,	//L3组合无功2
	0x03680002,0x03680102,0x03680202,0x03680302,0x03680402,	//L3一象限无功
	0x036A0002,0x036A0102,0x036A0202,0x036A0302,0x036A0402,	//L3二象限无功
	0x036C0002,0x036C0102,0x036C0202,0x036C0302,0x036C0402,	//L3三象限无功
	0x036E0002,0x036E0102,0x036E0202,0x036E0302,0x036E0402,	//L3四象限无功
	0x03740002,0x03740102,0x03740202,0x03740302,0x03740402, //L3相组合有功电量(abs(QI+QIV)+(abs(QII+QIII))
	0x03750002,0x03750102,0x03750202,0x03750302,0x03750402, //L3相组合有功电量(abs(QI+QIV)-(abs(QII+QIII))
*/	
/*
	0x04000002,0x04000005,0x04000102,0x04000105,0x04000202,
	0x04000205,0x04000302,0x04000305,0x04000402,0x04000405,		//正向有功需量
	0x04010002,0x04010005,0x04010102,0x04010105,0x04010202,
	0x04010205,0x04010302,0x04010305,0x04010402,0x04010405,		//反向有功需量
	0x04020002,0x04020005,0x04020102,0x04020105,0x04020202,
	0x04020205,0x04020302,0x04020305,0x04020402,0x04020405,		//组合无功1需量
	0x04030002,0x04030005,0x04030102,0x04030105,0x04030202,
	0x04030205,0x04030302,0x04030305,0x04030402,0x04030405,		//组合无功2需量
	0x040A0002,0x040A0005,0x040A0102,0x040A0105,0x040A0202,
	0x040A0205,0x040A0302,0x040A0305,0x040A0402,0x040A0405,		//L1正向有功需量
	0x040B0002,0x040B0005,0x040B0102,0x040B0105,0x040B0202,
	0x040B0205,0x040B0302,0x040B0305,0x040B0402,0x040B0405,		//L1反向有功需量
	0x040C0002,0x040C0005,0x040C0102,0x040C0105,0x040C0202,
	0x040C0205,0x040C0302,0x040C0305,0x040C0402,0x040C0405,		//L1组合无功1需量
	0x040D0002,0x040D0005,0x040D0102,0x040D0105,0x040D0202,
	0x040D0205,0x040D0302,0x040D0305,0x040D0402,0x040D0405,		//L1组合无功2需量
	0x04140002,0x04140005,0x04140102,0x04140105,0x04140202,
	0x04140205,0x04140302,0x04140305,0x04140402,0x04140405,		//L2正向有功需量
	0x04150002,0x04150005,0x04150102,0x04150105,0x04150202,
	0x04150205,0x04150302,0x04150305,0x04150402,0x04150405,		//L2反向有功需量
	0x04160002,0x04160005,0x04160102,0x04160105,0x04160202,
	0x04160205,0x04160302,0x04160305,0x04160402,0x04160405,		//L2组合无功1需量
	0x04170002,0x04170005,0x04170102,0x04170105,0x04170202,
	0x04170205,0x04170302,0x04170305,0x04170402,0x04170405,		//L2组合无功2需量
	0x041E0002,0x041E0005,0x041E0102,0x041E0105,0x041E0202,
	0x041E0205,0x04140302,0x041E0305,0x041E0402,0x041E0405,		//L3正向有功需量
	0x041F0002,0x041F0005,0x041F0102,0x041F0105,0x041F0202,
	0x041F0205,0x041F0302,0x041F0305,0x041F0402,0x041F0405,		//L3反向有功需量
	0x04200002,0x04200005,0x04200102,0x04200105,0x04200202,
	0x04200205,0x04200302,0x04200305,0x04200402,0x04200405,		//L3组合无功1需量
	0x04210002,0x04210005,0x04210102,0x04210105,0x04210202,
	0x04210205,0x04210302,0x04210305,0x04210402,0x04210405,		//L3组合无功2需量

	0x01810602,0x01810702,										//L1断相次数
	0x01810802,0x01810902,										//L2断相次数
	0x01810A02,0x01810B02,										//L3断相次数
	0x01811E02,0x01811F02,										//掉电次数
	*/
};
/*
static const uint32 cMaxDemandObjects[] =
{
	0x04000002,0x04000102,0x04000202,0x04000302,0x04000402,		//正向有功需量
	0x04010002,0x04010102,0x04010202,0x04010302,0x04010402,		//反向有功需量
	0x04020002,0x04020102,0x04020202,0x04020302,0x04020402,		//组合无功1需量
	0x04030002,0x04030102,0x04030202,0x04030302,0x04030402,		//组合无功2需量
	0x040A0002,0x040A0102,0x040A0202,0x040A0302,0x040A0402,		//L1正向有功需量
	0x040B0002,0x040B0102,0x040B0202,0x040B0302,0x040B0402,		//L1反向有功需量
	0x040C0002,0x040C0102,0x040C0202,0x040C0302,0x040C0402,		//L1组合无功1需量
	0x040D0002,0x040D0102,0x040D0202,0x040D0302,0x040D0402,		//L1组合无功2需量
	0x04140002,0x04140102,0x04140202,0x04140302,0x04140402,		//L2正向有功需量
	0x04150002,0x04150102,0x04150202,0x04150302,0x04150402,		//L2反向有功需量
	0x04160002,0x04160102,0x04160202,0x04160302,0x04160402,		//L2组合无功1需量
	0x04170002,0x04170102,0x04170202,0x04170302,0x04170402,		//L2组合无功2需量
	0x041E0002,0x041E0102,0x041E0202,0x041E0302,0x041E0402,		//L3正向有功需量
	0x041F0002,0x041F0102,0x041F0202,0x041F0302,0x041F0402,		//L3反向有功需量
	0x04200002,0x04200102,0x04200202,0x04200302,0x04200402,		//L3组合无功1需量
	0x04210002,0x04210102,0x04210202,0x04210302,0x04210402,		//L3组合无功2需量
};*/

#pragma pack(push, 1)
/*
static const uint16 cMaxDemandObjects[] =
{
	0x0000,0x0001,0x0002,0x0003,0x0004,		//正向有功需量
	0x0100,0x0101,0x0102,0x0103,0x0104,		//反向有功需量
	0x0200,0x0201,0x0202,0x0203,0x0204,		//组合无功1需量
	0x0300,0x0301,0x0302,0x0303,0x0304,		//组合无功2需量
	0x0A00,0x0A01,0x0A02,0x0A03,0x0A04,		//L1正向有功需量
	0x0B00,0x0B01,0x0B02,0x0B03,0x0B04,		//L1反向有功需量
	0x0C00,0x0C01,0x0C02,0x0C03,0x0C04,		//L1组合无功1需量
	0x0D00,0x0D01,0x0D02,0x0D03,0x0D04,		//L1组合无功2需量
	0x1400,0x1401,0x1402,0x1403,0x1404,		//L2正向有功需量
	0x1500,0x1501,0x1502,0x1503,0x1504,		//L2反向有功需量
	0x1600,0x1601,0x1602,0x1603,0x1604,		//L2组合无功1需量
	0x1700,0x1701,0x1702,0x1703,0x1704,		//L2组合无功2需量
	0x1E00,0x1E01,0x1E02,0x1E03,0x1E04,		//L3正向有功需量
	0x1F00,0x1F01,0x1F02,0x1F03,0x1F04,		//L3反向有功需量
	0x2000,0x2001,0x2002,0x2003,0x2004,		//L3组合无功1需量
	0x2100,0x2101,0x2102,0x2103,0x2104,		//L3组合无功2需量
};
*/
//#define MONTH_BILLING_MAX_DEMAND_NUM	(sizeof(cMaxDemandObjects)/2)
//#define MONTH_BILLING_ENERGY_DATA_NUM	(sizeof(cMonthBillingObjects)/4-1-MONTH_BILLING_MAX_DEMAND_NUM*2)
#define MONTH_BILLING_ENERGY_DATA_NUM	(sizeof(cMonthBillingObjects)/4-1)

typedef struct
{
	uint32 Data;
	tDateTime Time;
}tMaxDemandData;

typedef struct
{
	tDateTime Time;
	uint32 EnergyData[MONTH_BILLING_ENERGY_DATA_NUM];
	//tMaxDemandData MaxDemandData[MONTH_BILLING_MAX_DEMAND_NUM];
/*	
	tDateTime Time;
	uint32 Energy_A;			//正向有功
	uint32 Energy_T1_A;			//正向有功T1
	uint32 Energy_T2_A;
	uint32 Energy_T3_A;
	uint32 Energy_T4_A;
	uint32 Energy_A_;			//反向有功
	uint32 Energy_T1_A_;
	uint32 Energy_T2_A_;
	uint32 Energy_T3_A_;
	uint32 Energy_T4_A_;
//	uint32 MaxDemand_A;			//正向有功最大需量
//	tDateTime MaxDemandTime_A;
//	uint32 MaxDemand_A_;		//反向有功最大需量
//	tDateTime MaxDemandTime_A_;	//
	tMaxDemandData MaxDemand_A;			//正向有功最大需量
	tMaxDemandData MaxDemand_A_;		//反向有功最大需量
	*/
}tMonthBillingDataInfo;

typedef struct
{
//	tLogHead MonthBillingFreezeHead;
	tMonthBillingDataInfo MonthBillingDataInfo[MONTH_BILLING_MAX_NUM];
	//uint16 CheckSum;         //不需要，EEPROM没有分配空间
}tMonthBilling;
/*
typedef struct
{
	tMaxDemandData MaxDemand[MONTH_BILLING_MAX_DEMAND_NUM];		//正向有功	
	uint16 CheckSum;
}tMaxDemandInfo;
*/
typedef struct
{
	tDlmsDateTime BillingDateTime;
	uint16 CheckSum;
}tMonthBillingInfo;
/*
typedef struct
{
	tMaxDemandInfo MaxDemandInfo;
 //  	tMonthBilling MonthBilling;
}tEE_MonthInfo;
*/
typedef struct
{
	tLogHead MonthBillingFreezeHead;
	tLogHead MonthBillingFreezeBakHead;
	tMonthBillingInfo MonthBillingInfo;
}tEE_MonthBillingBak;

typedef struct
{
	tMonthBilling MonthBilling;
}tEE_MonthBillingData;

#pragma pack(pop)

/*Export functions---------------------------------------------*/
uint16 BillingPowerUpInit(void);
void BillingBatteryUpInit(void);
uint8 BillingIsDataIdBillingPeriod(uint32 DataId);
void BillingResetBillingTime(void);
void BillingProcess(void);
void BillingDataReset(void);
void BillingResetBillingTime(void);
void BillingPowerDownProcess(void);
//void BillingUpdateMaxDemand(uint32 DataId, uint32 Data, const tDateTime *Time);
void BillingGetBillingTime(tDateTime *pDateTime, uint8 Flag);
uint16 BillingParaGet(uint32 DataId, uint8 *pBuf);
uint8 BillingParaSet(uint32 DataId, uint8 *pBuf, uint16 Len);

#endif

