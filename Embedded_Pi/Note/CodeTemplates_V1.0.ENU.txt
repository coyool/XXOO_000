################################################################################
##
## This is an example file for defining your own code templates.
##
## The syntax for defining a code template is:
## #TEMPLATE <template name>,<field>[=default value], <field>...
##
## The template name, the fields and their default values should be defined 
## within quotes if they contain non-alphanumeric characters.
## Use "&" in front of a letter in the template name to make the letter become 
## a shortcut, which means that you can use ALT+<letter> to select the template 
## or jump to the field in the dialog box.
## Use ">" in the template to organize the template names in submenus.
##
################################################################################
#TEMPLATE "&Notes>&HEAD",&Name,"File &Name",&Description,&Version,&Created="Jr",&date="$DATE$",&Built="$TOOLKIT_DIR$   IAR for ARM 6.50 " 
/*******************************************************************************
* Copyright 2015      Jr 
* All right reserved
*
* 文件名称：%1
*
* 文件标识：%2
* 摘    要：%3
*
* 当前版本：%4
* 作    者：%5
* 完成日期：%6
* 编译环境：%7
* 
* 源代码说明：
*******************************************************************************/
#include    "all_header_file.h"

/*** static function prototype declarations ***/



/*** static variable declarations ***/



/*** extern variable declarations ***/




#TEMPLATE "&Statement>&ifndef","File &Name"
#ifndef __%1_H_
#define __%1_H_
%c

/*** define and type ***/



/*** extern variable declarations ***/



/*** extern function prototype declarations ***/
extern 
extern 
extern 
extern 
extern 


#endif   /* end __%1_H_ */


#TEMPLATE "&Statement>&if"
if ( %c )
{
    %c
}
else
{
    %c
}//end if ( %c )

#TEMPLATE "&Statement>&if..else.."
if ( %c )
{
    %c
}
else if
{
    %c
}
else
{
    %c
}//end if ( %c )

#TEMPLATE "&Statement>&switch"
switch ( %c )
{
    case 0:
        break;
    case 1:
        break;
    case 2:   
        break;
    ....    
        
    default:
        break;
        
}//end switch( %c )

#TEMPLATE &Statement>&for,"&End Value"=10,&Variable=i
for (u8 %2=0; %2<%1; %2++)
{
    %c
}//end for()

#TEMPLATE "&Statement>&ASSERT"
/* Check the parameters */
ASSERT (%c);

#TEMPLATE &Function>&ST_duino_void_Function_void,"Description","Syntax","Input &para;meter","Out &para;meter","return &parameter"
/*******************************************************************************
* Description : %1
* Syntax      : %2
* Parameters I: %3
* Parameters O: %4
* return      : %5
*******************************************************************************/
void %1(void)
{
    %c
	
	/* Check the parameters */
	ASSERT (%c);
}