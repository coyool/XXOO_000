C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\main.obj
COMPILER INVOKED BY: D:\Program Files\keil4\C51\BIN\C51.EXE main.c OMF2 BROWSE DEBUG OBJECT(..\main.obj)

line level    source

   1          //MCU: SH99F01
   2          #include  <SH99F01.h>
   3          #include  "MAIN.h"
   4          #include  "UART.h"
   5          #include  "PLT.h"
   6          #include  "string.h"
   7          
   8          
   9          //bit  bBaudOption = 1;         // 1: 2.4k, 0: 9.6k
  10          uchar uBaudOption = 0;          // 0: 2.4k, 1: 4.8k,  2: 9.6k
  11          bit  bChanOption = 0;           // 1: vincom(290KHz), 0: vin(290KHz)
  12          bit  bModeOption = 1;           // 1: DMZC, 0: NBSF
  13          bit  bFreqOption = 1;           // 1: 50Hz, 0: 60Hz
  14          
  15          uchar xdata meter_local_addr[6]={0};
  16          uchar xdata meter_local_addr_bak[6]={0};  // dummy
  17            
  18          uchar code meter_read_addr_645_1997[16]={0xFE,0xFE,0x68,0x99,0x99,0x99,0x99,0x99,0x99,0x68,0x01,0x02,0x65,
             -0xF3,0xC1,0x16};
  19          uchar code meter_read_addr_645_2007[14]={0xFE,0xFE,0x68,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x68,0x13,0x00,0xDF,
             -0x16};
  20          
  21          bit bShakeHandsOk = 0;
  22          uint xdata get_local_addr_timeout = 0xFFFF;
  23          uint xdata uart_tx_idle_timeout = 0;
  24          uint xdata uart_rx_idle_timeout = 0;
  25          
  26          
  27          void main(void)
  28          {
  29   1              uchar i;
  30   1              uchar temp;
  31   1      
  32   1              EA = 0;            //__disable interrupt
  33   1      //      // power on delay,  wait 4*(65535/16000) = 16ms 
  34   1      //      Timer_count = 0xFFFF;
  35   1      //      while(Timer_count)
  36   1      //              Timer_count--;                  
  37   1      //      Timer_count = 0xFFFF;
  38   1      //      while(Timer_count)
  39   1      //              Timer_count--;          
  40   1      //      Timer_count = 0xFFFF;
  41   1      //      while(Timer_count)
  42   1      //              Timer_count--;  
  43   1      //      Timer_count = 0xFFFF;
  44   1      //      while(Timer_count)
  45   1      //              Timer_count--;  
  46   1              ///////////////////////////////////////////////////     
  47   1      
  48   1      //  main_start:
  49   1      
  50   1          RSTSTAT = 0x00;                 //set watchdog duration¡A4096ms
  51   1      
  52   1              // power on delay,  wait 4*(65535/16000) = 16ms, 2014/3/21 
  53   1              Timer_count = 0xFFFF;
C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 2   

  54   1              while(Timer_count)
  55   1                      Timer_count--;                  
  56   1              Timer_count = 0xFFFF;
  57   1              while(Timer_count)
  58   1                      Timer_count--;          
  59   1              Timer_count = 0xFFFF;
  60   1              while(Timer_count)
  61   1                      Timer_count--;          
  62   1              Timer_count = 0xFFFF;
  63   1              while(Timer_count)
  64   1                      Timer_count--;  
  65   1      
  66   1              InitVariable();         //Initial System
  67   1      
  68   1              uBaudOption     = 0;    // 2.4k
  69   1              bChanOption = 0;        // vin : 290KHz
  70   1              bModeOption = 1;        // DMZC
  71   1              bFreqOption = 1;        // 50Hz
  72   1      
  73   1      
  74   1              // Options for S1 switch
  75   1              #if 0           
                              if ((P0&0x10)==0x10)      // P0.4 ~ bBaudOption    Ðü¿Õ
                                      uBaudOption = 1;          // 4.8K
                              else    
                                      uBaudOption = 0;          // 2.4K
                      
                              if ((P0&0x20)==0x20)      // P0.5 ~ bChanOption
                                      bChanOption = 1;          // 1: vincom(290KHz)
                              else    
                                      bChanOption = 0;          // 0: vin(290KHz)
                                      
                              if ((P1&0x40)==0x40)      // P1.6 ~ ucModeOption
                                      bModeOption = 1;          // 1: DMZC
                              else    
                                      bModeOption = 0;          // 0: NBSF
                                                                      
                              if ((P1&0x80)==0x80)      // P1.7 ~ bACFreqDetect
                                      bACFreqDetect = 1;      
                              else    
                                      bACFreqDetect = 0;                                      
                      #endif
  96   1              
  97   1              InitPLT();                      //Initial PLT  
  98   1              InitUART();                     //Initial UART   
  99   1      
 100   1              bShakeHandsOk = 0;
 101   1              uart_tx_idle_timeout = 0;
 102   1              uart_rx_idle_timeout = 0;
 103   1              get_local_addr_timeout = 500;
 104   1      
 105   1      
 106   1      //      uart_trans.uart_buf[0]=0xFE;
 107   1      //      uart_trans.uart_buf[1]=0xFE;
 108   1      //      uart_trans.uart_buf[2]=0xFE;
 109   1      //      uart_trans.uart_buf[3]=0xFE;
 110   1      //      uart_trans.uart_buf[4]=0x68;
 111   1      //      uart_trans.uart_buf[5]=0x01;
 112   1      //      uart_trans.uart_buf[6]=0x02;
 113   1      //      uart_trans.uart_buf[7]=0x03;
 114   1      //      uart_trans.uart_buf[8]=0x04;
 115   1      //      uart_trans.uart_buf[9]=0x05;
C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 3   

 116   1      //      uart_trans.uart_buf[10]=0x06;
 117   1      //      uart_trans.uart_buf[11]=0x68;
 118   1      //      uart_trans.uart_buf[12]=0x81;
 119   1      //      uart_trans.uart_buf[13]=0x08;
 120   1      //      uart_trans.uart_buf[14]=0x65;
 121   1      //      uart_trans.uart_buf[15]=0xF3;
 122   1      //      uart_trans.uart_buf[16]=0x34;
 123   1      //      uart_trans.uart_buf[17]=0x35;
 124   1      //      uart_trans.uart_buf[18]=0x36;
 125   1      //      uart_trans.uart_buf[19]=0x37;
 126   1      //      uart_trans.uart_buf[20]=0x38;
 127   1      //      uart_trans.uart_buf[21]=0x39;
 128   1      //      uart_trans.uart_buf[22]=0x0D;
 129   1      //      uart_trans.uart_buf[23]=0x16;
 130   1      //      uart_trans.uart_framelen = sizeof(meter_read_addr_645_1997);
 131   1      //      for(i=0;i<(uart_trans.uart_framelen+4);i++)
 132   1      //      {
 133   1      //              if (uart_trans.uart_buf[i]==0x68)
 134   1      //                break;
 135   1      //      }
 136   1      //      temp = UartCheckSum(&uart_trans.uart_buf[i],18);
 137   1      //      if ((temp==uart_trans.uart_buf[i+18])&&(uart_trans.uart_buf[i+8]==0x81))
 138   1      //      {
 139   1      //              bShakeHandsOk = 1;
 140   1      //              memcpy(&meter_local_addr,&uart_trans.uart_buf[i+1],6);
 141   1      //              memcpy(meter_local_addr_bak,meter_local_addr,6);
 142   1      //      }
 143   1      
 144   1              EA = 1;
 145   1              
 146   1              while(1)
 147   1              {
 148   2                      RSTSTAT = 0X00;      //watch dog
 149   2      
 150   2      //              // 2014/3/21
 151   2      //              if (uart_idle_timeout>90)               // dummy
 152   2      //              {
 153   2      //                      EA = 0;                         
 154   2      //                      uart_idle_timeout = 0;
 155   2      //                      goto main_start;                        
 156   2      //              }
 157   2      
 158   2                      // 2014/5/27, modify
 159   2                      // 2014/6/5, modify new
 160   2                      //if (uart_idle_timeout>500)            // 500s  ~ 8 minute  timeout
 161   2                      if (uart_tx_idle_timeout>600)           // 600s ~ 10 minutes, 2014/6/9
 162   2                      {
 163   3                              EA = 0;                         
 164   3                              uart_tx_idle_timeout = 0;
 165   3                              //goto main_start;                                              
 166   3                              while(1);                         // 2014/6/5     ?? software reset
 167   3                      }
 168   2      
 169   2                      if (uart_rx_idle_timeout>600)           // 600s ~ 10 minutes, 2014/6/9
 170   2                      {
 171   3                              EA = 0;                         
 172   3                              uart_rx_idle_timeout = 0;
 173   3                              //goto main_start;                                              
 174   3                              while(1);                         // 2014/6/5     ?? software reset
 175   3                      }
 176   2      
 177   2                      if (bShakeHandsOk)
C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 4   

 178   2                      {
 179   3                              App_Task();
 180   3                              Uart_Task();
 181   3                              PLTTask();
 182   3                      }
 183   2                      else
 184   2                      {
 185   3                              // 2014/3/21
 186   3                              if (get_local_addr_timeout==0)
 187   3                              {
 188   4                                      uart_trans.uart_framelen = sizeof(meter_read_addr_645_1997);
 189   4                                      ES=0;           // dummy                
 190   4                                      TI = 0;         // dummy
 191   4                                      RI = 0;
 192   4                                      for(i=0; i<uart_trans.uart_framelen; i++)       
 193   4                                      {
 194   5                                              UartReturn(meter_read_addr_645_1997[i]);          //putchar();
 195   5                                      }
 196   4                                      ES = 1;            //UART interrrupt enable
 197   4                                      uart_TI_ready = 0;
 198   4                                      uart_RI_ok = 0;
 199   4                                      uart_trans.uart_ptr = 0;
 200   4                                      uart_RI_start = 0;
 201   4                                      RSTSTAT = 0X00;      //watch dog                        
 202   4                                      get_local_addr_timeout = 500;
 203   4                                      while((!uart_RI_ok)&&(get_local_addr_timeout))
 204   4                                      {
 205   5                                              Uart_Task();    
 206   5                                      }
 207   4              
 208   4                                      if (uart_RI_ok)
 209   4                                      {
 210   5                                              uart_RI_ok = 0;
 211   5                                              get_local_addr_timeout = 0xFFFF;
 212   5                                              for(i=0;i<(uart_trans.uart_framelen+4);i++)
 213   5                                              {
 214   6                                                      if (uart_trans.uart_buf[i]==0x68)
 215   6                                                        break;
 216   6                                              }
 217   5                                              temp = UartCheckSum(&uart_trans.uart_buf[i],18);
 218   5                                              if ((temp==uart_trans.uart_buf[i+18])&&(uart_trans.uart_buf[i+8]==0x81))   // 1997  version
 219   5                                              {
 220   6      
 221   6      
 222   6                                                      // 2014/6/4, quick restart
 223   6                                                      get_local_addr_timeout = 100;
 224   6                                                      PLC_TX=0;   // 1
 225   6                                                      PLC_RX=0;       // 1
 226   6                                                      while(get_local_addr_timeout);
 227   6                                                      get_local_addr_timeout = 100;
 228   6                                                      PLC_TX=1;  // 0
 229   6                                                      PLC_RX=1;  // 0
 230   6                                                      while(get_local_addr_timeout);
 231   6                                                      get_local_addr_timeout = 100;
 232   6                                                      PLC_TX=0;  // 1
 233   6                                                      PLC_RX=0;  // 1
 234   6                                                      while(get_local_addr_timeout);
 235   6                                                      get_local_addr_timeout = 100;
 236   6                                                      PLC_TX=1;    // 0
 237   6                                                      PLC_RX=1;    // 0
 238   6                                                      while(get_local_addr_timeout);
 239   6                                                      ////////////////////////////////
C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 5   

 240   6      
 241   6                                                      bShakeHandsOk = 1;
 242   6                                                      uart_tx_idle_timeout = 0;       // 2014/6/5
 243   6                                                      uart_rx_idle_timeout = 0;       // 2014/6/5
 244   6                                                      get_local_addr_timeout = 0xFFFF;        // dummy
 245   6                                                      memcpy(meter_local_addr_bak,&uart_trans.uart_buf[i+12],6);              // 2014/3/21, UIU
 246   6                                                      meter_local_addr[0] = meter_local_addr_bak[0]-0x33;
 247   6                                                      meter_local_addr[1] = meter_local_addr_bak[1]-0x33;
 248   6                                                      meter_local_addr[2] = meter_local_addr_bak[2]-0x33;
 249   6                                                      meter_local_addr[3] = meter_local_addr_bak[3]-0x33;
 250   6                                                      meter_local_addr[4] = meter_local_addr_bak[4]-0x33;
 251   6                                                      meter_local_addr[5] = meter_local_addr_bak[5]-0x33;
 252   6                                                      
 253   6                                                      memcpy(meter_local_addr_bak,meter_local_addr,6);        // 2014/5/27
 254   6      
 255   6                                              }
 256   5                                              else
 257   5                                              {
 258   6                                                      uart_RI_ok = 0;
 259   6                                                      uart_trans.uart_ptr = 0;
 260   6                                                      uart_RI_start = 0;                      
 261   6                                                      get_local_addr_timeout = 500;                                   
 262   6                                              }       
 263   5                                      }
 264   4                                      else
 265   4                                      {
 266   5                                              uart_trans.uart_framelen = sizeof(meter_read_addr_645_2007);
 267   5                                              ES=0;           // dummy                
 268   5                                              TI = 0;         // dummy, 2014/3/21
 269   5                                              RI = 0;
 270   5                                              for(i=0;i<uart_trans.uart_framelen;i++) 
 271   5                                              {
 272   6                                                      UartReturn(meter_read_addr_645_2007[i]);
 273   6                                              }
 274   5                                              ES = 1;
 275   5                                              uart_TI_ready = 0;
 276   5                                              uart_RI_ok = 0;
 277   5                                              uart_trans.uart_ptr = 0;
 278   5                                              uart_RI_start = 0;      
 279   5                                              RSTSTAT = 0X00;      //watch dog                
 280   5                                              get_local_addr_timeout = 500;
 281   5                                              while((!uart_RI_ok)&&(get_local_addr_timeout))
 282   5                                              {
 283   6                                                      Uart_Task();    
 284   6                                              }
 285   5                      
 286   5                                              if (uart_RI_ok)
 287   5                                              {
 288   6                                                      uart_RI_ok = 0;
 289   6                                                      get_local_addr_timeout = 0xFFFF;
 290   6                                                      for(i=0;i<(uart_trans.uart_framelen+4);i++)
 291   6                                                      {
 292   7                                                              if (uart_trans.uart_buf[i]==0x68)
 293   7                                                                break;
 294   7                                                      }
 295   6                                                      temp = UartCheckSum(&uart_trans.uart_buf[i],16);
 296   6                                                      if ((temp==uart_trans.uart_buf[i+16])&&(uart_trans.uart_buf[i+8]==0x93))        // 2007   version
 297   6                                                      {
 298   7      
 299   7      
 300   7                                                              // 2014/6/4, quick restart
 301   7                                                              get_local_addr_timeout = 100;
C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 6   

 302   7                                                              PLC_TX=0;  // 1
 303   7                                                              PLC_RX=0;  // 1
 304   7                                                              while(get_local_addr_timeout);
 305   7                                                              get_local_addr_timeout = 100;
 306   7                                                              PLC_TX=1;  //   0
 307   7                                                              PLC_RX=1;    // 0
 308   7                                                              while(get_local_addr_timeout);
 309   7                                                              get_local_addr_timeout = 100;
 310   7                                                              PLC_TX=0;     //   1
 311   7                                                              PLC_RX=0;     //    1
 312   7                                                              while(get_local_addr_timeout);
 313   7                                                              get_local_addr_timeout = 100;
 314   7                                                              PLC_TX=1;   //    0
 315   7                                                              PLC_RX=1;    //   0
 316   7                                                              while(get_local_addr_timeout);
 317   7                                                              ////////////////////////////////
 318   7      
 319   7                                                              bShakeHandsOk = 1;
 320   7                                                              uart_tx_idle_timeout = 0;       // debug
 321   7                                                              uart_rx_idle_timeout = 0;       // debug
 322   7                                                              get_local_addr_timeout = 0xFFFF;        // dummy
 323   7                                                              memcpy(meter_local_addr_bak,&uart_trans.uart_buf[i+10],6);              // 2014/3/21, UIU
 324   7                                                              meter_local_addr[0] = meter_local_addr_bak[0]-0x33;
 325   7                                                              meter_local_addr[1] = meter_local_addr_bak[1]-0x33;
 326   7                                                              meter_local_addr[2] = meter_local_addr_bak[2]-0x33;
 327   7                                                              meter_local_addr[3] = meter_local_addr_bak[3]-0x33;
 328   7                                                              meter_local_addr[4] = meter_local_addr_bak[4]-0x33;
 329   7                                                              meter_local_addr[5] = meter_local_addr_bak[5]-0x33;
 330   7      
 331   7                                                              memcpy(meter_local_addr_bak,meter_local_addr,6);        // 2014/5/27
 332   7      
 333   7      
 334   7                                                      }
 335   6                                                      else
 336   6                                                      {
 337   7                                                              uart_RI_ok = 0;
 338   7                                                              uart_trans.uart_ptr = 0;
 339   7                                                              uart_RI_start = 0;                      
 340   7                                                              get_local_addr_timeout = 500;                                   
 341   7                                                      }
 342   6                                              }
 343   5                                              else
 344   5                                              {
 345   6                                                      get_local_addr_timeout = 500;
 346   6      
 347   6                                                      // change baud rate      , 2014/3/21, Baud Rate
 348   6                                                      uBaudOption++;
 349   6                                                      if (uBaudOption>2)
 350   6                                                              uBaudOption = 0;
 351   6      
 352   6                                                      InitUART();                                             
 353   6                                              }
 354   5                                      }                                                       
 355   4                              }
 356   3      //                      if (uart_idle_timeout>90)               // dummy
 357   3      //                              uart_idle_timeout = 0;
 358   3                      }
 359   2              }
 360   1      }
 361          
 362          
 363          /****************************************************************************
C51 COMPILER V9.00   MAIN                                                                  09/11/2014 17:34:34 PAGE 7   

 364           * Function:          void InitVariable() 
 365           * Input Parameter:   None
 366           * OutPut Parameter:  None
 367           * Return Value:      None
 368           * Description:       System Parameter setting
 369           *                                              
 370           ***************************************************************************/
 371          void InitVariable()
 372          {
 373   1                      
 374   1              P0CR  = 0xC0;             //P0.6,P0.7 output,other input        (P0.6 LED902)(P0.7 LED901) 
 375   1              P1CR  = 0x80;         // P1.7output, other input         P1.7   
 376   1      
 377   1              P0PCR = 0xF8;         // P0.0~P0.2 input no pull high, other pull high
 378   1              P1PCR = 0xFF;             // input all pull high
 379   1      
 380   1              P0 = 0x00;
 381   1              P1 = 0x00;
 382   1          
 383   1              //Timer 1
 384   1              TMOD = 0x21;                    //Timer0-mode1(16bit up/down timer),Timer1-mode2(8bit auto reloaded) 
 385   1              TR1 = 1;                                //Start Timer1
 386   1              TF1 = 0;
 387   1              //Timer 0
 388   1          TH0 = (-TIMER0)>>8;         //wait 1ms  
 389   1              TL0     = -TIMER0;    
 390   1              TF0 = 0;
 391   1              TR0 = 1;                                //Start Timer0
 392   1      
 393   1          //ADC Initial
 394   1              ADCON = 0x80;
 395   1              ADT = 0xA8;                      //32*tsys, 4*Tad
 396   1      
 397   1          IPL0 = 0x02;             //T0 high priority, UART second priority
 398   1          IPH0 = 0x12;
 399   1      
 400   1              IEN0 = 0;                                //Close  PLT interrupt
 401   1              IEN1 = 0X01;                     //enable PLT interrupt
 402   1              EA = 1;                                  //Enable interrupt
 403   1          ET0 = 1;                             //Enable Timer0 interrupt
 404   1      
 405   1              return;
 406   1      }
 407          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1088    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
