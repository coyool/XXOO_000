C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN ..\..\main.obj
COMPILER INVOKED BY: D:\Program Files\keil4\C51\BIN\C51.EXE main.c OMF2 BROWSE DEBUG OBJECT(..\..\main.obj)

line level    source

   1          //MCU: SH99F01
   2          #include  <SH99F01.h>
   3          #include  "MAIN.h"
   4          #include  "UART.h"
   5          #include  "PLT.h"
   6          #include  "string.h"
   7          //#include  "stdio.h"                   /* printf scanf */
   8          
   9          
  10          //bit  bBaudOption = 1;         // 1: 2.4k, 0: 9.6k
  11          uchar uBaudOption = 0;          // 0: 2.4k, 1: 4.8k,  2: 9.6k
  12          bit  bChanOption = 0;           // 1: vincom(290KHz), 0: vin(290KHz)
  13          bit  bModeOption = 1;           // 1: DMZC, 0: NBSF
  14          bit  bFreqOption = 1;           // 1: 50Hz, 0: 60Hz
  15          
  16          uchar xdata meter_local_addr[6]={0};
  17          uchar xdata meter_local_addr_bak[6]={0};  // dummy
  18            
  19          uchar code meter_read_addr_645_1997[16]={0xFE,0xFE,0x68,0x99,0x99,0x99,0x99,0x99,0x99,0x68,0x01,0x02,0x65,
             -0xF3,0xC1,0x16};
  20          uchar code meter_read_addr_645_2007[14]={0xFE,0xFE,0x68,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x68,0x13,0x00,0xDF,
             -0x16};
  21          
  22          bit bShakeHandsOk = 0;
  23          uint xdata get_local_addr_timeout = 0xFFFF;
  24          uint xdata uart_tx_idle_timeout = 0;
  25          uint xdata uart_rx_idle_timeout = 0;
  26          
  27          
  28          void main(void)
  29          {
  30   1              uchar i;
  31   1              uchar temp;
  32   1      
  33   1              EA = 0;            //__disable interrupt
  34   1      //      // power on delay,  wait 4*(65535/16000) = 16ms 
  35   1      //      Timer_count = 0xFFFF;
  36   1      //      while(Timer_count)
  37   1      //              Timer_count--;                  
  38   1      //      Timer_count = 0xFFFF;
  39   1      //      while(Timer_count)
  40   1      //              Timer_count--;          
  41   1      //      Timer_count = 0xFFFF;
  42   1      //      while(Timer_count)
  43   1      //              Timer_count--;  
  44   1      //      Timer_count = 0xFFFF;
  45   1      //      while(Timer_count)
  46   1      //              Timer_count--;  
  47   1              ///////////////////////////////////////////////////     
  48   1      
  49   1      //  main_start:
  50   1      
  51   1          RSTSTAT = 0x00;                 //set watchdog duration¡A4096ms
  52   1      
  53   1              // power on delay,  wait 4*(65535/16000) = 16ms, 2014/3/21 
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 2   

  54   1              Timer_count = 0xFFFF;
  55   1              while(Timer_count)
  56   1                      Timer_count--;                  
  57   1              Timer_count = 0xFFFF;
  58   1              while(Timer_count)
  59   1                      Timer_count--;          
  60   1              Timer_count = 0xFFFF;
  61   1              while(Timer_count)
  62   1                      Timer_count--;          
  63   1              Timer_count = 0xFFFF;
  64   1              while(Timer_count)
  65   1                      Timer_count--;  
  66   1      
  67   1              InitVariable();         //Initial System
  68   1      
  69   1              uBaudOption     = 0;    // 2.4k
  70   1              bChanOption = 0;        // vin : 290KHz
  71   1              bModeOption = 1;        // DMZC
  72   1              bFreqOption = 1;        // 50Hz
  73   1      
  74   1      
  75   1              // Options for S1 switch
  76   1              #if 0           
                              if ((P0&0x10)==0x10)      // P0.4 ~ bBaudOption    Ðü¿Õ
                                      uBaudOption = 1;          // 4.8K
                              else    
                                      uBaudOption = 0;          // 2.4K
                      
                              if ((P0&0x20)==0x20)      // P0.5 ~ bChanOption
                                      bChanOption = 1;          // 1: vincom(290KHz)
                              else    
                                      bChanOption = 0;          // 0: vin(290KHz)
                                      
                              if ((P1&0x40)==0x40)      // P1.6 ~ ucModeOption
                                      bModeOption = 1;          // 1: DMZC
                              else    
                                      bModeOption = 0;          // 0: NBSF
                                                                      
                              if ((P1&0x80)==0x80)      // P1.7 ~ bACFreqDetect
                                      bACFreqDetect = 1;      
                              else    
                                      bACFreqDetect = 0;                                      
                      #endif
  97   1              
  98   1              InitPLT();                      //Initial PLT  
  99   1              InitUART();                     //Initial UART   
 100   1              PLC_TX=1;           // LED light off  ybz!
 101   1              PLC_RX=1;           // LED light off  ybz!
 102   1      
 103   1              bShakeHandsOk = 0;
 104   1              uart_tx_idle_timeout = 0;
 105   1              uart_rx_idle_timeout = 0;
 106   1              get_local_addr_timeout = 500;
 107   1      
 108   1      
 109   1      //      uart_trans.uart_buf[0]=0xFE;
 110   1      //      uart_trans.uart_buf[1]=0xFE;
 111   1      //      uart_trans.uart_buf[2]=0xFE;
 112   1      //      uart_trans.uart_buf[3]=0xFE;
 113   1      //      uart_trans.uart_buf[4]=0x68;
 114   1      //      uart_trans.uart_buf[5]=0x01;
 115   1      //      uart_trans.uart_buf[6]=0x02;
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 3   

 116   1      //      uart_trans.uart_buf[7]=0x03;
 117   1      //      uart_trans.uart_buf[8]=0x04;
 118   1      //      uart_trans.uart_buf[9]=0x05;
 119   1      //      uart_trans.uart_buf[10]=0x06;
 120   1      //      uart_trans.uart_buf[11]=0x68;
 121   1      //      uart_trans.uart_buf[12]=0x81;
 122   1      //      uart_trans.uart_buf[13]=0x08;
 123   1      //      uart_trans.uart_buf[14]=0x65;
 124   1      //      uart_trans.uart_buf[15]=0xF3;
 125   1      //      uart_trans.uart_buf[16]=0x34;
 126   1      //      uart_trans.uart_buf[17]=0x35;
 127   1      //      uart_trans.uart_buf[18]=0x36;
 128   1      //      uart_trans.uart_buf[19]=0x37;
 129   1      //      uart_trans.uart_buf[20]=0x38;
 130   1      //      uart_trans.uart_buf[21]=0x39;
 131   1      //      uart_trans.uart_buf[22]=0x0D;
 132   1      //      uart_trans.uart_buf[23]=0x16;
 133   1      //      uart_trans.uart_framelen = sizeof(meter_read_addr_645_1997);
 134   1      //      for(i=0;i<(uart_trans.uart_framelen+4);i++)
 135   1      //      {
 136   1      //              if (uart_trans.uart_buf[i]==0x68)
 137   1      //                break;
 138   1      //      }
 139   1      //      temp = UartCheckSum(&uart_trans.uart_buf[i],18);
 140   1      //      if ((temp==uart_trans.uart_buf[i+18])&&(uart_trans.uart_buf[i+8]==0x81))
 141   1      //      {
 142   1      //              bShakeHandsOk = 1;
 143   1      //              memcpy(&meter_local_addr,&uart_trans.uart_buf[i+1],6);
 144   1      //              memcpy(meter_local_addr_bak,meter_local_addr,6);
 145   1      //      }
 146   1      
 147   1              EA = 1;
 148   1              //printf("fucking high \r\n");  //ybz!
 149   1              //while(1);
 150   1              
 151   1              while(1)
 152   1              {
 153   2                      RSTSTAT = 0X00;      //watch dog
 154   2      
 155   2      //              // 2014/3/21
 156   2      //              if (uart_idle_timeout>90)               // dummy
 157   2      //              {
 158   2      //                      EA = 0;                         
 159   2      //                      uart_idle_timeout = 0;
 160   2      //                      goto main_start;                        
 161   2      //              }
 162   2      
 163   2                      // 2014/5/27, modify
 164   2                      // 2014/6/5, modify new
 165   2                      //if (uart_idle_timeout>500)            // 500s  ~ 8 minute  timeout
 166   2                      if (uart_tx_idle_timeout>600)           // 600s ~ 10 minutes, 2014/6/9
 167   2                      {
 168   3                              EA = 0;                         
 169   3                              uart_tx_idle_timeout = 0;
 170   3                              //goto main_start;                                              
 171   3                              while(1);                         // 2014/6/5     ?? software reset
 172   3                      }
 173   2      
 174   2                      if (uart_rx_idle_timeout>600)           // 600s ~ 10 minutes, 2014/6/9
 175   2                      {
 176   3                              EA = 0;                         
 177   3                              uart_rx_idle_timeout = 0;
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 4   

 178   3                              //goto main_start;                                              
 179   3                              while(1);                         // 2014/6/5     ?? software reset
 180   3                      }
 181   2      
 182   2                      if (bShakeHandsOk)
 183   2                      {
 184   3                              App_Task();
 185   3                              Uart_Task();
 186   3                              PLTTask();
 187   3                      }
 188   2                      else
 189   2                      {
 190   3                              // 2014/3/21
 191   3                              if (get_local_addr_timeout==0)
 192   3                              {
 193   4                                  //printf(" 645_1997_shakehand ");  //ybz!   
 194   4                                      uart_trans.uart_framelen = sizeof(meter_read_addr_645_1997);
 195   4                                      ES=0;           // dummy        UART interrupt disable  
 196   4                                      TI = 0;         // dummy    UART interrupt TX flag
 197   4                                      RI = 0;         //              UART interrupt RX flag
 198   4                                      for(i=0; i<uart_trans.uart_framelen; i++)       
 199   4                                      {
 200   5                                              UartReturn(meter_read_addr_645_1997[i]);          //putchar();
 201   5                                      }
 202   4                                      ES = 1;            //UART interrrupt enable
 203   4                                      uart_TI_ready = 0;
 204   4                                      uart_RI_ok = 0;
 205   4                                      uart_trans.uart_ptr = 0;
 206   4                                      uart_RI_start = 0;
 207   4                                      RSTSTAT = 0X00;      //watch dog                        
 208   4                                      get_local_addr_timeout = 500;
 209   4                                      while((!uart_RI_ok)&&(get_local_addr_timeout))
 210   4                                      {
 211   5                                              Uart_Task();    
 212   5                                      }
 213   4              
 214   4                                      if (uart_RI_ok)
 215   4                                      {
 216   5                                              uart_RI_ok = 0;
 217   5                                              get_local_addr_timeout = 0xFFFF;
 218   5                                              for(i=0;i<(uart_trans.uart_framelen+4);i++)  //  20³¤¶È
 219   5                                              {
 220   6                                                      if (uart_trans.uart_buf[i]==0x68)        //  limit 90 byte
 221   6                                                        break;
 222   6                                              }
 223   5                                              temp = UartCheckSum(&uart_trans.uart_buf[i],18);
 224   5                                              if ((temp==uart_trans.uart_buf[i+18])&&(uart_trans.uart_buf[i+8]==0x81))   // 1997  version
 225   5                                              {
 226   6      
 227   6      
 228   6                                                      // 2014/6/4, quick restart
 229   6                                                      get_local_addr_timeout = 100;
 230   6                                                      PLC_TX=0;   // 1
 231   6                                                      PLC_RX=0;       // 1
 232   6                                                      while(get_local_addr_timeout);
 233   6                                                      get_local_addr_timeout = 100;
 234   6                                                      PLC_TX=1;  // 0
 235   6                                                      PLC_RX=1;  // 0
 236   6                                                      while(get_local_addr_timeout);
 237   6                                                      get_local_addr_timeout = 100;
 238   6                                                      PLC_TX=0;  // 1
 239   6                                                      PLC_RX=0;  // 1
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 5   

 240   6                                                      while(get_local_addr_timeout);
 241   6                                                      get_local_addr_timeout = 100;
 242   6                                                      PLC_TX=1;    // 0
 243   6                                                      PLC_RX=1;    // 0
 244   6                                                      while(get_local_addr_timeout);
 245   6                                                      ////////////////////////////////
 246   6      
 247   6                                                      bShakeHandsOk = 1;
 248   6                                                      uart_tx_idle_timeout = 0;       // 2014/6/5
 249   6                                                      uart_rx_idle_timeout = 0;       // 2014/6/5
 250   6                                                      get_local_addr_timeout = 0xFFFF;        // dummy
 251   6                                                      memcpy(meter_local_addr_bak,&uart_trans.uart_buf[i+12],6);              // 2014/3/21, UIU
 252   6                                                      meter_local_addr[0] = meter_local_addr_bak[0]-0x33;
 253   6                                                      meter_local_addr[1] = meter_local_addr_bak[1]-0x33;
 254   6                                                      meter_local_addr[2] = meter_local_addr_bak[2]-0x33;
 255   6                                                      meter_local_addr[3] = meter_local_addr_bak[3]-0x33;
 256   6                                                      meter_local_addr[4] = meter_local_addr_bak[4]-0x33;
 257   6                                                      meter_local_addr[5] = meter_local_addr_bak[5]-0x33;
 258   6                                                      
 259   6                                                      memcpy(meter_local_addr_bak,meter_local_addr,6);        // 2014/5/27
 260   6      
 261   6                                              }
 262   5                                              else
 263   5                                              {
 264   6                                                      uart_RI_ok = 0;
 265   6                                                      uart_trans.uart_ptr = 0;
 266   6                                                      uart_RI_start = 0;                      
 267   6                                                      get_local_addr_timeout = 500;                                   
 268   6                                              }       
 269   5                                      }
 270   4                                      else
 271   4                                      {
 272   5                                              //printf(" 645_2007_shakehand ");                 //ybz!
 273   5                                              uart_trans.uart_framelen = sizeof(meter_read_addr_645_2007);
 274   5                                              ES=0;           // dummy                
 275   5                                              TI = 0;         // dummy, 2014/3/21
 276   5                                              RI = 0;
 277   5                                              for(i=0;i<uart_trans.uart_framelen;i++) 
 278   5                                              {
 279   6                                                      UartReturn(meter_read_addr_645_2007[i]);
 280   6                                              }
 281   5                                              ES = 1;
 282   5                                              uart_TI_ready = 0;
 283   5                                              uart_RI_ok = 0;
 284   5                                              uart_trans.uart_ptr = 0;
 285   5                                              uart_RI_start = 0;      
 286   5                                              RSTSTAT = 0X00;      //watch dog                
 287   5                                              get_local_addr_timeout = 500;
 288   5                                              while((!uart_RI_ok)&&(get_local_addr_timeout))
 289   5                                              {
 290   6                                                      Uart_Task();    
 291   6                                              }
 292   5                      
 293   5                                              if (uart_RI_ok)
 294   5                                              {
 295   6                                                      uart_RI_ok = 0;
 296   6                                                      get_local_addr_timeout = 0xFFFF;
 297   6                                                      for(i=0;i<(uart_trans.uart_framelen+4);i++)
 298   6                                                      {
 299   7                                                              if (uart_trans.uart_buf[i]==0x68)
 300   7                                                                break;
 301   7                                                      }
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 6   

 302   6                                                      temp = UartCheckSum(&uart_trans.uart_buf[i],16);
 303   6                                                      if ((temp==uart_trans.uart_buf[i+16])&&(uart_trans.uart_buf[i+8]==0x93))        // 2007   version
 304   6                                                      {
 305   7      
 306   7      
 307   7                                                              // 2014/6/4, quick restart
 308   7                                                              get_local_addr_timeout = 100;
 309   7                                                              PLC_TX=0;  // 1
 310   7                                                              PLC_RX=0;  // 1
 311   7                                                              while(get_local_addr_timeout);
 312   7                                                              get_local_addr_timeout = 100;
 313   7                                                              PLC_TX=1;  //   0
 314   7                                                              PLC_RX=1;    // 0
 315   7                                                              while(get_local_addr_timeout);
 316   7                                                              get_local_addr_timeout = 100;
 317   7                                                              PLC_TX=0;     //   1
 318   7                                                              PLC_RX=0;     //    1
 319   7                                                              while(get_local_addr_timeout);
 320   7                                                              get_local_addr_timeout = 100;
 321   7                                                              PLC_TX=1;   //    0
 322   7                                                              PLC_RX=1;    //   0
 323   7                                                              while(get_local_addr_timeout);
 324   7                                                              ////////////////////////////////
 325   7      
 326   7                                                              bShakeHandsOk = 1;
 327   7                                                              uart_tx_idle_timeout = 0;       // debug
 328   7                                                              uart_rx_idle_timeout = 0;       // debug
 329   7                                                              get_local_addr_timeout = 0xFFFF;        // dummy
 330   7                                                              memcpy(meter_local_addr_bak,&uart_trans.uart_buf[i+10],6);              // 2014/3/21, UIU
 331   7                                                              meter_local_addr[0] = meter_local_addr_bak[0]-0x33;
 332   7                                                              meter_local_addr[1] = meter_local_addr_bak[1]-0x33;
 333   7                                                              meter_local_addr[2] = meter_local_addr_bak[2]-0x33;
 334   7                                                              meter_local_addr[3] = meter_local_addr_bak[3]-0x33;
 335   7                                                              meter_local_addr[4] = meter_local_addr_bak[4]-0x33;
 336   7                                                              meter_local_addr[5] = meter_local_addr_bak[5]-0x33;
 337   7      
 338   7                                                              memcpy(meter_local_addr_bak,meter_local_addr,6);        // 2014/5/27
 339   7      
 340   7      
 341   7                                                      }
 342   6                                                      else
 343   6                                                      {
 344   7                                                              uart_RI_ok = 0;
 345   7                                                              uart_trans.uart_ptr = 0;
 346   7                                                              uart_RI_start = 0;                      
 347   7                                                              get_local_addr_timeout = 500;                                   
 348   7                                                      }
 349   6                                              }
 350   5                                              else
 351   5                                              {
 352   6                                                      get_local_addr_timeout = 500;
 353   6      
 354   6                                                      // change baud rate      , 2014/3/21, Baud Rate
 355   6                                                      uBaudOption++;
 356   6                                                      if (uBaudOption>2)
 357   6                                                              uBaudOption = 0;
 358   6      
 359   6                                                      InitUART();                                             
 360   6                                              }
 361   5                                      }                                                       
 362   4                              }
 363   3      //                      if (uart_idle_timeout>90)               // dummy
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 7   

 364   3      //                              uart_idle_timeout = 0;
 365   3                      }
 366   2              }
 367   1      }
 368          
 369          
 370          /****************************************************************************
 371           * Function:          void InitVariable() 
 372           * Input Parameter:   None
 373           * OutPut Parameter:  None
 374           * Return Value:      None
 375           * Description:       System Parameter setting
 376           *                                              
 377           ***************************************************************************/
 378          void InitVariable()
 379          {
 380   1                      
 381   1              P0CR  = 0xC0;             //P0.6,P0.7 output,other input        (P0.6 LED902)(P0.7 LED901) 
 382   1              P1CR  = 0x80;         // P1.7output, other input         P1.7   
 383   1      
 384   1              P0PCR = 0xF8;         // P0.0~P0.2 input no pull high, other pull high
 385   1              P1PCR = 0xFF;             // input all pull high
 386   1      
 387   1              P0 = 0x00;
 388   1              P1 = 0x00;
 389   1          
 390   1              //Timer 1
 391   1              TMOD = 0x21;                    //Timer0-mode1(16bit up/down timer),Timer1-mode2(8bit auto reloaded) 
 392   1              TR1 = 1;                                //Start Timer1
 393   1              TF1 = 0;
 394   1              //Timer 0
 395   1          TH0 = (-TIMER0)>>8;         //wait 1ms  
 396   1              TL0     = -TIMER0;    
 397   1              TF0 = 0;
 398   1              TR0 = 1;                                //Start Timer0
 399   1      
 400   1          //ADC Initial
 401   1              ADCON = 0x80;
 402   1              ADT = 0xA8;                      //32*tsys, 4*Tad
 403   1      
 404   1          IPL0 = 0x02;             //T0 high priority, UART second priority
 405   1          IPH0 = 0x12;
 406   1      
 407   1              IEN0 = 0;                                //Close  PLT interrupt
 408   1              IEN1 = 0X01;                     //enable PLT interrupt
 409   1              EA = 1;                                  //Enable interrupt
 410   1          ET0 = 1;                             //Enable Timer0 interrupt
 411   1      
 412   1              return;
 413   1      }
 414          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1092    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.00   MAIN                                                                  09/16/2014 17:52:59 PAGE 8   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
